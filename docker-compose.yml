
version: '3'
networks:
  pulsar:
    driver: bridge
  productos:
    driver: bridge
services:
# Start zookeeper
  zookeeper:
    image: apachepulsar/pulsar:latest
    profiles: ["pulsar"]
    container_name: zookeeper
    restart: on-failure
    networks:
      - pulsar
    volumes:
      - ./data/zookeeper:/pulsar/data/zookeeper
    environment:
      - metadataStoreUrl=zk:zookeeper:2181
    command: >
      bash -c "bin/apply-config-from-env.py conf/zookeeper.conf && \
             bin/generate-zookeeper-config.sh conf/zookeeper.conf && \
             exec bin/pulsar zookeeper"
    healthcheck:
      test: ["CMD", "bin/pulsar-zookeeper-ruok.sh"]
      interval: 10s
      timeout: 5s
      retries: 30

# Init cluster metadata
  pulsar-init:
    container_name: pulsar-init
    hostname: pulsar-init
    image: apachepulsar/pulsar:latest
    profiles: ["pulsar"]
    networks:
      - pulsar
    command: >
      bin/pulsar initialize-cluster-metadata \
               --cluster cluster-a \
               --zookeeper zookeeper:2181 \
               --configuration-store zookeeper:2181 \
               --web-service-url http://broker:8080 \
               --broker-service-url pulsar://broker:6650
    depends_on:
      zookeeper:
        condition: service_healthy

# Start bookie
  bookie:
    image: apachepulsar/pulsar:latest
    profiles: ["pulsar"]
    container_name: bookie
    restart: on-failure
    networks:
      - pulsar
    environment:
      - clusterName=cluster-a
      - zkServers=zookeeper:2181
      - metadataServiceUri=metadata-store:zk:zookeeper:2181
    depends_on:
      zookeeper:
        condition: service_healthy
      pulsar-init:
        condition: service_completed_successfully
  # Map the local directory to the container to avoid bookie startup failure due to insufficient container disks.
    volumes:
      - ./data/bookkeeper:/pulsar/data/bookkeeper
    command: bash -c "bin/apply-config-from-env.py conf/bookkeeper.conf
      && exec bin/pulsar bookie"

# Start broker
  broker:
    image: apachepulsar/pulsar:latest
    profiles: ["pulsar"]
    container_name: broker
    hostname: broker
    restart: on-failure
    networks:
      - pulsar
    environment:
      - metadataStoreUrl=zk:zookeeper:2181
      - zookeeperServers=zookeeper:2181
      - clusterName=cluster-a
      - managedLedgerDefaultEnsembleSize=1
      - managedLedgerDefaultWriteQuorum=1
      - managedLedgerDefaultAckQuorum=1
      - advertisedAddress=broker
      - advertisedListeners=external:pulsar://broker:6650
    depends_on:
      zookeeper:
        condition: service_healthy
      bookie:
        condition: service_started
    ports:
      - "6650:6650"
      - "8080:8080"
    volumes:
      - ./connectors/pulsar:/pulsar/connectors
    command: bash -c "bin/apply-config-from-env.py conf/broker.conf
      &&  exec bin/pulsar broker"

  # MySQL8
  db-productos:
    image: mysql:8
    hostname: db-productos
    container_name: db-productos
    cap_add:
      - SYS_NICE
    restart: always
    environment:
      - MYSQL_DATABASE=productos
      - MYSQL_ROOT_PASSWORD=adminadmin
    profiles: ["db"]
    networks:
      - pulsar
    ports:
      - '3306:3306'
    volumes:
      - ./data/mysql/productos:/var/lib/mysql
      - ./admin-productos/init.sql:/docker-entrypoint-initdb.d/init.sql

  # MySQL8
  db-gestor-compra:
    image: mysql:8
    hostname: db-gestor-compra
    container_name: db-gestor-compra
    cap_add:
      - SYS_NICE
    restart: always
    environment:
      - MYSQL_DATABASE=gestor-compra
      - MYSQL_ROOT_PASSWORD=adminadmin
      - MYSQL_TCP_PORT=3307
    profiles: ["db"]
    networks:
      - pulsar
    ports:
      - '3307:3307'
    volumes:
      - ./data/mysql/gestor-compra:/var/lib/mysql

  # Servicio Admin. Productos
  admin-productos:
    container_name: admin-productos
    hostname: admin-productos
    build:
      context: ./admin-productos/
      dockerfile: Dockerfile
    profiles: ["alpes", "admin-productos"]
    depends_on:
      - broker
      - db-productos
    environment:
      - AEROALPES_ADDRESS=aeroalpes
      - PULSAR_ADDRESS=broker
      - BROKER_HOST=broker
      - DB_USERNAME=root
      - DB_PASSWORD=adminadmin
      - DB_HOSTNAME=db-productos
    networks:
      - pulsar
    ports:
      - "5000:5000"

  # Servicio Gestor Compras
  gestor-compra:
    container_name: gestor-compra
    hostname: gestor-compra
    build:
      context: ./gestor-compra/
      dockerfile: Dockerfile
    profiles: ["alpes", "gestor-compra"]
    depends_on:
      - broker
      - db-gestor-compra
    environment:
      - AEROALPES_ADDRESS=aeroalpes
      - PULSAR_ADDRESS=broker
      - BROKER_HOST=broker
      - DB_USERNAME=root
      - DB_PASSWORD=adminadmin
      - DB_HOSTNAME=db-gestor-compra
      - DB_PORT=3307
    networks:
      - pulsar
    ports:
      - "5001:5001"

  # Servicio Consolidador
  consolidador:
    container_name: consolidador
    hostname: consolidador
    build:
      context: ./consolidador/
      dockerfile: Dockerfile
    profiles: ["alpes", "consolidador"]
    depends_on:
      - broker
      - db-productos
    environment:
      - AEROALPES_ADDRESS=aeroalpes
      - PULSAR_ADDRESS=broker
      - BROKER_HOST=broker
    networks:
      - pulsar
    ports:
      - "5004:5004"

  # Servicio Monitor
  monitor:
    container_name: monitor
    hostname: monitor
    build:
      context: ./monitor
      dockerfile: Dockerfile
    profiles: ["monitor"]
    environment:
      - BROKER_HOST=34.30.24.104
      - BROKER_PORT=8080
    networks:
      - pulsar
    ports:
      - "5020:5020"